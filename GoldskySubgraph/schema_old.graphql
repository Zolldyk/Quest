# ============ Schema Definition for Quest DeFi dApp ============
# This schema defines the entities and relationships for indexing
# staking pool events and quest completion events on Etherlink

# ============ Staking Pool Entities ============

"""
Represents a user who has staked tokens in the pool
"""
type Staker @entity(immutable: false) {
  # Unique identifier: user's wallet address
  id: ID!

  # User's wallet address
  address: Bytes!

  # Current staked amount in USDC (in wei)
  currentStakedAmount: BigInt!

  # Total amount ever staked by this user
  totalStaked: BigInt!

  # Total amount ever unstaked by this user
  totalUnstaked: BigInt!

  # Number of stake transactions
  stakeCount: Int!

  # Number of unstake transactions
  unstakeCount: Int!

  # Timestamp of first stake
  firstStakeTimestamp: BigInt!

  # Timestamp of last activity (stake or unstake)
  lastActivityTimestamp: BigInt!

  # All stake transactions by this user
  stakes: [StakeTransaction!]! @derivedFrom(field: "staker")

  # All unstake transactions by this user
  unstakes: [UnstakeTransaction!]! @derivedFrom(field: "staker")

  # Quests completed by this staker (if they also participate in quests)
  questsCompleted: [Quest!]! @derivedFrom(field: "staker")
}

"""
Represents the overall staking pool state and statistics
"""
type StakingPool @entity(immutable: false) {
  # Singleton entity with ID "1"
  id: ID!

  # Total amount currently staked in the pool (in USDC wei)
  totalStaked: BigInt!

  # Total number of unique stakers
  totalStakers: Int!

  # Total number of stake transactions
  totalStakeTransactions: Int!

  # Total number of unstake transactions
  totalUnstakeTransactions: Int!

  # Total rewards distributed from the pool
  totalRewardsDistributed: BigInt!

  # Number of quests funded by this pool
  questsFunded: Int!

  # Timestamp of last update
  lastUpdated: BigInt!

  # Block number of last update
  lastUpdatedBlock: BigInt!
}

"""
Individual stake transaction
"""
type StakeTransaction @entity(immutable: true) {
  # Unique identifier: txHash-logIndex
  id: ID!

  # Reference to the staker
  staker: Staker!

  # Amount staked (in USDC wei)
  amount: BigInt!

  # Pool balance after this stake
  poolBalanceAfter: BigInt!

  # Transaction hash
  transactionHash: Bytes!

  # Block number
  blockNumber: BigInt!

  # Block timestamp
  timestamp: BigInt!

  # Gas used for this transaction
  gasUsed: BigInt!

  # Gas price
  gasPrice: BigInt!
}

"""
Individual unstake transaction
"""
type UnstakeTransaction @entity(immutable: true) {
  # Unique identifier: txHash-logIndex
  id: ID!

  # Reference to the staker
  staker: Staker!

  # Amount unstaked (in USDC wei)
  amount: BigInt!

  # Pool balance after this unstake
  poolBalanceAfter: BigInt!

  # Transaction hash
  transactionHash: Bytes!

  # Block number
  blockNumber: BigInt!

  # Block timestamp
  timestamp: BigInt!

  # Gas used for this transaction
  gasUsed: BigInt!

  # Gas price
  gasPrice: BigInt!
}

# ============ Quest System Entities ============

"""
Represents a player who participates in quests
"""
type Player @entity(immutable: false) {
  # Unique identifier: user's wallet address
  id: ID!

  # Player's wallet address
  address: Bytes!

  # Total quests completed by this player
  questsCompleted: Int!

  # Total rewards earned from quests (in USDC wei)
  totalRewardsEarned: BigInt!

  # Total NFTs minted by this player
  nftsMinted: Int!

  # Timestamp of first quest completion
  firstQuestTimestamp: BigInt!

  # Timestamp of last quest completion
  lastQuestTimestamp: BigInt!

  # All quests completed by this player
  quests: [Quest!]! @derivedFrom(field: "player")

  # All NFTs minted by this player
  nfts: [QuestNFT!]! @derivedFrom(field: "owner")

  # Whether this player is also a staker
  isStaker: Boolean!
}

"""
Represents a completed quest
"""
type Quest @entity(immutable: false) {
  # Unique identifier: questId-playerAddress or txHash-logIndex
  id: ID!

  # Reference to the player who completed the quest
  player: Player!

  # Reference to the staker (if the player is also a staker)
  staker: Staker

  # Quest ID (for tracking different quest types in the future)
  questId: BigInt!

  # Quest type identifier (e.g., "social_media", "twitter_post")
  questType: String!

  # Proof submitted by the player (e.g., tweet URL)
  proofSubmitted: String!

  # Whether the quest was verified by admin
  isVerified: Boolean!

  # Reward amount distributed (in USDC wei)
  rewardAmount: BigInt!

  # Whether reward was successfully distributed
  rewardDistributed: Boolean!

  # NFT minted for this quest completion
  nftMinted: QuestNFT

  # Timestamp when quest was submitted
  submissionTimestamp: BigInt!

  # Timestamp when quest was verified
  verificationTimestamp: BigInt

  # Transaction hash of submission
  submissionTxHash: Bytes!

  # Transaction hash of verification/reward distribution
  verificationTxHash: Bytes

  # Block number of submission
  submissionBlock: BigInt!

  # Block number of verification
  verificationBlock: BigInt

  # Address of admin who verified (if applicable)
  verifiedBy: Bytes
}

"""
Represents an NFT badge minted for quest completion
"""
type QuestNFT @entity(immutable: false) {
  # Unique identifier: NFT token ID or contract address + token ID
  id: ID!

  # NFT token ID
  tokenId: BigInt!

  # Owner of the NFT
  owner: Player!

  # Quest that this NFT was minted for
  quest: Quest!

  # NFT contract address (Sequence contract)
  contractAddress: Bytes!

  # Token URI/metadata
  tokenURI: String

  # Timestamp when NFT was minted
  mintTimestamp: BigInt!

  # Transaction hash of minting
  mintTxHash: Bytes!

  # Block number when minted
  mintBlock: BigInt!

  # Whether the NFT is still owned by original recipient
  isOriginalOwner: Boolean!
}

# ============ Global Statistics ============

"""
Global statistics for the entire Quest dApp
"""
type GlobalStats @entity(immutable: false) {
  # Singleton entity with ID "global"
  id: ID!

  # Total unique users (stakers + players, deduplicated)
  totalUniqueUsers: Int!

  # Total staking pool balance
  totalPoolBalance: BigInt!

  # Total rewards distributed
  totalRewardsDistributed: BigInt!

  # Total quests completed
  totalQuestsCompleted: Int!

  # Total NFTs minted
  totalNFTsMinted: Int!

  # Average reward per quest
  averageRewardPerQuest: BigInt!

  # Total transaction volume (stakes + unstakes + rewards)
  totalTransactionVolume: BigInt!

  # Number of active stakers (those with current stake > 0)
  activeStakers: Int!

  # Number of active players (completed at least one quest)
  activePlayers: Int!

  # Timestamp of last update
  lastUpdated: BigInt!

  # Block number of last update
  lastUpdatedBlock: BigInt!
}

# ============ Daily/Hourly Analytics (Optional for MVP) ============

"""
Daily aggregated statistics
"""
type DailyStats @entity(immutable: true) {
  # Unique identifier: YYYY-MM-DD format
  id: ID!

  # Date in YYYY-MM-DD format
  date: String!

  # Unix timestamp for the start of the day
  timestamp: BigInt!

  # Daily staking volume
  dailyStakeVolume: BigInt!

  # Daily unstaking volume
  dailyUnstakeVolume: BigInt!

  # New stakers on this day
  newStakers: Int!

  # New players on this day
  newPlayers: Int!

  # Quests completed on this day
  questsCompleted: Int!

  # Rewards distributed on this day
  rewardsDistributed: BigInt!

  # NFTs minted on this day
  nftsMinted: Int!

  # Pool balance at end of day
  poolBalanceEOD: BigInt!
}

# ============ Event Log Entities (For Debugging) ============

"""
Raw event logs for debugging and audit purposes
"""
type EventLog @entity(immutable: true) {
  # Unique identifier: txHash-logIndex
  id: ID!

  # Event name (e.g., "Stake", "Unstake", "QuestSubmitted")
  eventName: String!

  # Contract address that emitted the event
  contractAddress: Bytes!

  # Transaction hash
  transactionHash: Bytes!

  # Block number
  blockNumber: BigInt!

  # Block timestamp
  timestamp: BigInt!

  # Log index within the transaction
  logIndex: BigInt!

  # Raw event data (JSON string)
  rawData: String!
}
