// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class QuestTemplate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestTemplate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestTemplate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("QuestTemplate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuestTemplate | null {
    return changetype<QuestTemplate | null>(
      store.get_in_block("QuestTemplate", id),
    );
  }

  static load(id: string): QuestTemplate | null {
    return changetype<QuestTemplate | null>(store.get("QuestTemplate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questId(): BigInt {
    let value = this.get("questId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set questId(value: BigInt) {
    this.set("questId", Value.fromBigInt(value));
  }

  get questType(): string {
    let value = this.get("questType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set questType(value: string) {
    this.set("questType", Value.fromString(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get submissionWindow(): BigInt {
    let value = this.get("submissionWindow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submissionWindow(value: BigInt) {
    this.set("submissionWindow", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get submissions(): QuestSubmissionLoader {
    return new QuestSubmissionLoader(
      "QuestTemplate",
      this.get("id")!.toString(),
      "submissions",
    );
  }

  get completedCount(): i32 {
    let value = this.get("completedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set completedCount(value: i32) {
    this.set("completedCount", Value.fromI32(value));
  }

  get totalRewardsDistributed(): BigInt {
    let value = this.get("totalRewardsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsDistributed(value: BigInt) {
    this.set("totalRewardsDistributed", Value.fromBigInt(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalSubmissions(): i32 {
    let value = this.get("totalSubmissions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSubmissions(value: i32) {
    this.set("totalSubmissions", Value.fromI32(value));
  }

  get questsCompleted(): i32 {
    let value = this.get("questsCompleted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set questsCompleted(value: i32) {
    this.set("questsCompleted", Value.fromI32(value));
  }

  get questsRejected(): i32 {
    let value = this.get("questsRejected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set questsRejected(value: i32) {
    this.set("questsRejected", Value.fromI32(value));
  }

  get totalRewardsEarned(): BigInt {
    let value = this.get("totalRewardsEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsEarned(value: BigInt) {
    this.set("totalRewardsEarned", Value.fromBigInt(value));
  }

  get nftsMinted(): i32 {
    let value = this.get("nftsMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set nftsMinted(value: i32) {
    this.set("nftsMinted", Value.fromI32(value));
  }

  get firstSubmissionTimestamp(): BigInt {
    let value = this.get("firstSubmissionTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSubmissionTimestamp(value: BigInt) {
    this.set("firstSubmissionTimestamp", Value.fromBigInt(value));
  }

  get lastActivityTimestamp(): BigInt {
    let value = this.get("lastActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityTimestamp(value: BigInt) {
    this.set("lastActivityTimestamp", Value.fromBigInt(value));
  }

  get submissions(): QuestSubmissionLoader {
    return new QuestSubmissionLoader(
      "Player",
      this.get("id")!.toString(),
      "submissions",
    );
  }

  get nfts(): QuestNFTLoader {
    return new QuestNFTLoader("Player", this.get("id")!.toString(), "nfts");
  }
}

export class QuestSubmission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestSubmission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestSubmission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("QuestSubmission", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuestSubmission | null {
    return changetype<QuestSubmission | null>(
      store.get_in_block("QuestSubmission", id),
    );
  }

  static load(id: string): QuestSubmission | null {
    return changetype<QuestSubmission | null>(store.get("QuestSubmission", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submissionId(): BigInt {
    let value = this.get("submissionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submissionId(value: BigInt) {
    this.set("submissionId", Value.fromBigInt(value));
  }

  get quest(): string {
    let value = this.get("quest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quest(value: string) {
    this.set("quest", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get tweetUrl(): string {
    let value = this.get("tweetUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tweetUrl(value: string) {
    this.set("tweetUrl", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get isVerified(): boolean {
    let value = this.get("isVerified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isVerified(value: boolean) {
    this.set("isVerified", Value.fromBoolean(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get rewardDistributed(): boolean {
    let value = this.get("rewardDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set rewardDistributed(value: boolean) {
    this.set("rewardDistributed", Value.fromBoolean(value));
  }

  get nftMinted(): string | null {
    let value = this.get("nftMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftMinted(value: string | null) {
    if (!value) {
      this.unset("nftMinted");
    } else {
      this.set("nftMinted", Value.fromString(<string>value));
    }
  }

  get rejectionReason(): string | null {
    let value = this.get("rejectionReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rejectionReason(value: string | null) {
    if (!value) {
      this.unset("rejectionReason");
    } else {
      this.set("rejectionReason", Value.fromString(<string>value));
    }
  }

  get submissionTimestamp(): BigInt {
    let value = this.get("submissionTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submissionTimestamp(value: BigInt) {
    this.set("submissionTimestamp", Value.fromBigInt(value));
  }

  get verificationTimestamp(): BigInt | null {
    let value = this.get("verificationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set verificationTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("verificationTimestamp");
    } else {
      this.set("verificationTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get submissionTxHash(): Bytes {
    let value = this.get("submissionTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set submissionTxHash(value: Bytes) {
    this.set("submissionTxHash", Value.fromBytes(value));
  }

  get verificationTxHash(): Bytes | null {
    let value = this.get("verificationTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set verificationTxHash(value: Bytes | null) {
    if (!value) {
      this.unset("verificationTxHash");
    } else {
      this.set("verificationTxHash", Value.fromBytes(<Bytes>value));
    }
  }

  get submissionBlock(): BigInt {
    let value = this.get("submissionBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submissionBlock(value: BigInt) {
    this.set("submissionBlock", Value.fromBigInt(value));
  }

  get verificationBlock(): BigInt | null {
    let value = this.get("verificationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set verificationBlock(value: BigInt | null) {
    if (!value) {
      this.unset("verificationBlock");
    } else {
      this.set("verificationBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get verifiedBy(): Bytes | null {
    let value = this.get("verifiedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set verifiedBy(value: Bytes | null) {
    if (!value) {
      this.unset("verifiedBy");
    } else {
      this.set("verifiedBy", Value.fromBytes(<Bytes>value));
    }
  }
}

export class QuestNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("QuestNFT", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuestNFT | null {
    return changetype<QuestNFT | null>(store.get_in_block("QuestNFT", id));
  }

  static load(id: string): QuestNFT | null {
    return changetype<QuestNFT | null>(store.get("QuestNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get originalRecipient(): string {
    let value = this.get("originalRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set originalRecipient(value: string) {
    this.set("originalRecipient", Value.fromString(value));
  }

  get submission(): string {
    let value = this.get("submission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submission(value: string) {
    this.set("submission", Value.fromString(value));
  }

  get quest(): string {
    let value = this.get("quest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quest(value: string) {
    this.set("quest", Value.fromString(value));
  }

  get tweetUrl(): string {
    let value = this.get("tweetUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tweetUrl(value: string) {
    this.set("tweetUrl", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get mintTimestamp(): BigInt {
    let value = this.get("mintTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintTimestamp(value: BigInt) {
    this.set("mintTimestamp", Value.fromBigInt(value));
  }

  get mintTxHash(): Bytes {
    let value = this.get("mintTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set mintTxHash(value: Bytes) {
    this.set("mintTxHash", Value.fromBytes(value));
  }

  get mintBlock(): BigInt {
    let value = this.get("mintBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintBlock(value: BigInt) {
    this.set("mintBlock", Value.fromBigInt(value));
  }

  get isOriginalOwner(): boolean {
    let value = this.get("isOriginalOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isOriginalOwner(value: boolean) {
    this.set("isOriginalOwner", Value.fromBoolean(value));
  }

  get transfers(): NFTTransferLoader {
    return new NFTTransferLoader(
      "QuestNFT",
      this.get("id")!.toString(),
      "transfers",
    );
  }
}

export class NFTTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTTransfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTTransfer | null {
    return changetype<NFTTransfer | null>(
      store.get_in_block("NFTTransfer", id),
    );
  }

  static load(id: string): NFTTransfer | null {
    return changetype<NFTTransfer | null>(store.get("NFTTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id),
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPlayers(): i32 {
    let value = this.get("totalPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPlayers(value: i32) {
    this.set("totalPlayers", Value.fromI32(value));
  }

  get totalQuests(): i32 {
    let value = this.get("totalQuests");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalQuests(value: i32) {
    this.set("totalQuests", Value.fromI32(value));
  }

  get totalSubmissions(): i32 {
    let value = this.get("totalSubmissions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSubmissions(value: i32) {
    this.set("totalSubmissions", Value.fromI32(value));
  }

  get totalQuestsCompleted(): i32 {
    let value = this.get("totalQuestsCompleted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalQuestsCompleted(value: i32) {
    this.set("totalQuestsCompleted", Value.fromI32(value));
  }

  get totalQuestsRejected(): i32 {
    let value = this.get("totalQuestsRejected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalQuestsRejected(value: i32) {
    this.set("totalQuestsRejected", Value.fromI32(value));
  }

  get totalRewardsDistributed(): BigInt {
    let value = this.get("totalRewardsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsDistributed(value: BigInt) {
    this.set("totalRewardsDistributed", Value.fromBigInt(value));
  }

  get totalNFTsMinted(): i32 {
    let value = this.get("totalNFTsMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalNFTsMinted(value: i32) {
    this.set("totalNFTsMinted", Value.fromI32(value));
  }

  get averageRewardPerQuest(): BigInt {
    let value = this.get("averageRewardPerQuest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averageRewardPerQuest(value: BigInt) {
    this.set("averageRewardPerQuest", Value.fromBigInt(value));
  }

  get activePlayers(): i32 {
    let value = this.get("activePlayers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set activePlayers(value: i32) {
    this.set("activePlayers", Value.fromI32(value));
  }

  get activeQuests(): i32 {
    let value = this.get("activeQuests");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set activeQuests(value: i32) {
    this.set("activeQuests", Value.fromI32(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }

  get lastUpdatedBlock(): BigInt {
    let value = this.get("lastUpdatedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedBlock(value: BigInt) {
    this.set("lastUpdatedBlock", Value.fromBigInt(value));
  }
}

export class DailyStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get_in_block("DailyStats", id));
  }

  static load(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get("DailyStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newPlayers(): i32 {
    let value = this.get("newPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newPlayers(value: i32) {
    this.set("newPlayers", Value.fromI32(value));
  }

  get submissions(): i32 {
    let value = this.get("submissions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set submissions(value: i32) {
    this.set("submissions", Value.fromI32(value));
  }

  get questsCompleted(): i32 {
    let value = this.get("questsCompleted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set questsCompleted(value: i32) {
    this.set("questsCompleted", Value.fromI32(value));
  }

  get questsRejected(): i32 {
    let value = this.get("questsRejected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set questsRejected(value: i32) {
    this.set("questsRejected", Value.fromI32(value));
  }

  get rewardsDistributed(): BigInt {
    let value = this.get("rewardsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardsDistributed(value: BigInt) {
    this.set("rewardsDistributed", Value.fromBigInt(value));
  }

  get nftsMinted(): i32 {
    let value = this.get("nftsMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set nftsMinted(value: i32) {
    this.set("nftsMinted", Value.fromI32(value));
  }

  get newQuests(): i32 {
    let value = this.get("newQuests");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newQuests(value: i32) {
    this.set("newQuests", Value.fromI32(value));
  }
}

export class EventLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventLog must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EventLog", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EventLog | null {
    return changetype<EventLog | null>(store.get_in_block("EventLog", id));
  }

  static load(id: string): EventLog | null {
    return changetype<EventLog | null>(store.get("EventLog", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventName(): string {
    let value = this.get("eventName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get rawData(): string {
    let value = this.get("rawData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawData(value: string) {
    this.set("rawData", Value.fromString(value));
  }
}

export class QuestSubmissionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): QuestSubmission[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<QuestSubmission[]>(value);
  }
}

export class QuestNFTLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): QuestNFT[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<QuestNFT[]>(value);
  }
}

export class NFTTransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NFTTransfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NFTTransfer[]>(value);
  }
}
