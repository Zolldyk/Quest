"use strict";exports.id=66848,exports.ids=[66848],exports.modules={66848:(a,b,c)=>{c.d(b,{relayOpenZeppelinTransaction:()=>k});var d=c(48691),e=c(81768),f=c(21984),g=c(59654);async function h({account:a,serializableTransaction:b,transaction:c,gasless:e}){let f=(0,d.P)({address:e.relayerForwarderAddress,chain:c.chain,client:c.client}),h=await (0,g.readContract)({contract:f,method:"function getNonce(address) view returns (uint256)",params:[a.address]}),[k,l]=await (async()=>{if(!b.to)throw Error("OpenZeppelin transactions must have a 'to' address");if(!b.gas)throw Error("OpenZeppelin transactions must have a 'gas' value");if(!b.data)throw Error("OpenZeppelin transactions must have a 'data' value");if(e.experimentalChainlessSupport){let d={chainid:BigInt(c.chain.id),data:b.data,from:a.address,gas:b.gas,nonce:h,to:b.to,value:0n};return[await a.signTypedData({domain:{name:"GSNv2 Forwarder",verifyingContract:f.address,version:"0.0.1"},message:d,primaryType:"ForwardRequest",types:{ForwardRequest:j}}),d]}let d={data:b.data,from:a.address,gas:b.gas,nonce:h,to:b.to,value:0n};return[await a.signTypedData({domain:{chainId:c.chain.id,name:e.domainName??"GSNv2 Forwarder",verifyingContract:f.address,version:e.domainVersion??"0.0.1"},message:d,primaryType:"ForwardRequest",types:{ForwardRequest:i}}),d]})();return{message:l,messageType:"forward",signature:k}}let i=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],j=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}];async function k(a){let{message:b,messageType:c,signature:d}=await h(a),g=await fetch(a.gasless.relayerUrl,{body:(0,f.stringify)({forwarderAddress:a.gasless.relayerForwarderAddress,request:b,signature:d,type:c}),method:"POST"});if(!g.ok)throw Error(`Failed to send transaction: ${await g.text()}`);let i=await g.json();if(!i.result)throw Error(`Relay transaction failed: ${i.message}`);let j=JSON.parse(i.result).txHash;if((0,e.q)(j))return{chain:a.transaction.chain,client:a.transaction.client,transactionHash:j};throw Error(`Failed to send transaction: ${(0,f.stringify)(i)}`)}}};