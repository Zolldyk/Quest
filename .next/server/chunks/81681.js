"use strict";exports.id=81681,exports.ids=[81681],exports.modules={81681:(a,b,c)=>{c.d(b,{relayEngineTransaction:()=>k});var d=c(48691),e=c(21984),f=c(59654),g=c(19518);async function h({account:a,serializableTransaction:b,transaction:c,gasless:e}){let g=(0,d.P)({address:e.relayerForwarderAddress,chain:c.chain,client:c.client}),h=await (0,f.readContract)({contract:g,method:"function getNonce(address) view returns (uint256)",params:[a.address]}),[k,l]=await (async()=>{if(!b.to)throw Error("engine transactions must have a 'to' address");if(!b.gas)throw Error("engine transactions must have a 'gas' value");if(!b.data)throw Error("engine transactions must have a 'data' value");if(e.experimentalChainlessSupport){let d={chainid:BigInt(c.chain.id),data:b.data,from:a.address,gas:b.gas,nonce:h,to:b.to,value:0n};return[await a.signTypedData({domain:{name:"GSNv2 Forwarder",verifyingContract:g.address,version:"0.0.1"},message:d,primaryType:"ForwardRequest",types:{ForwardRequest:j}}),d]}let d={data:b.data,from:a.address,gas:b.gas,nonce:h,to:b.to,value:0n};return[await a.signTypedData({domain:{chainId:c.chain.id,name:e.domainName??"GSNv2 Forwarder",verifyingContract:g.address,version:e.domainVersion??"0.0.1"},message:d,primaryType:"ForwardRequest",types:{ForwardRequest:i}}),d]})();return{message:l,messageType:"forward",signature:k}}let i=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],j=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}];async function k(a){let{message:b,messageType:c,signature:d}=await h(a),f=await fetch(a.gasless.relayerUrl,{body:(0,e.stringify)({forwarderAddress:a.gasless.relayerForwarderAddress,request:b,signature:d,type:c}),headers:{"Content-Type":"application/json"},method:"POST"});if(!f.ok)throw Error(`Failed to send transaction: ${await f.text()}`);let g=await f.json();if(!g.result)throw Error(`Relay transaction failed: ${g.message}`);let i=g.result.queueId,j=Date.now()+6e4;for(;Date.now()<j;){let b=await l({options:a,queueId:i});if(b)return{chain:a.transaction.chain,client:a.transaction.client,transactionHash:b.transactionHash};await new Promise(a=>setTimeout(a,1e3))}throw Error("Failed to find relayed transaction after 60000ms")}async function l(a){let{options:b,queueId:c}=a,d=b.gasless.relayerUrl.split("/relayer/")[0],e=await fetch(`${d}/transaction/status/${c}`,{method:"GET"}),f=await e.json();if(!e.ok)return null;let h=f.result;if(!h)return null;switch(h.status){case"errored":throw Error(`Transaction errored with reason: ${h.errorMessage}`);case"cancelled":throw Error("Transaction execution cancelled.");case"mined":return await (0,g.L)({chain:b.transaction.chain,client:b.transaction.client,transactionHash:h.transactionHash});default:return null}}}};